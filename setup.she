# -*- mode: sh; coding: utf-8; -*-
function setup_term {
    export TERM=xterm-256color
}

function setup_gpg {
    GPG_TTY=$(tty)
    echo $GPG_TTY
    export GPG_TTY 
}

function setup_java() {
    echo "> Setup Java..."

    # JAVA
    case "$OSTYPE" in
	solaris*) ;;
	darwin*)
	    JAVA_HOME="$(/usr/libexec/java_home # -v 1.7
)"
	    JDK_HOME=$JAVA_HOME
	    STUDIO_JDK=$JDK_HOME
	    ;;
	linux*)
	    JAVA_HOME="/usr/lib/jvm/java-7-oracle"
	    ;;
	bsd*) ;;
	*)
	    export JAVA_HOME
	    export JDK_HOME
	    export STUDIO_JDK
	    ;;
    esac
}

function setup_maven {
    echo "> Setup Maven..."
    export MVN_HOME=~/.local/opt/maven
    export PATH=$PATH:$MVN_HOME/bin
}

function setup_groovy {
    echo "> Setup Groovy..."
    export GROOVY_HOME=/usr/local/opt/groovy/libexec
}

function setup_gvm {
    # http://gvmtool.net/
    # curl -s get.gvmtool.net | bash
}

function setup_key() {
    echo "> Setup Key for Linux..."
    case "$OSTYPE" in
	linux*)
	    xmodmap ~/.xmodmap
	    ;;
    esac
}

function setup_android() {
    echo "> Setup Android..."
    export ANDROID_HOME="$HOME/.local/opt/adk"
    ANDROID_PATH="$ANDROID_HOME/tools"
    export PATH="$ANDROID_PATH:$PATH"
}

function setup_go() {
    echo "> Setup Go..."

    export GOROOT=$HOME/.local/opt/go
    export PATH=$PATH:$GOROOT/bin

    # export EMACSLOADPATH=$HOME/Drobox/bootstrap:$EMACSLOADPATH
    export GOPATH=$GOROOT
    export PATH=$PATH:$GOPATH/bin

    export CODESEARCH_HOME=$HOME/Dropbox/opt/codesearch
    export PATH=$PATH:$CODESEARCH_HOME/cmd

    # $ go get -u github.com/nsf/gocode
}

function setup_cask() {
    echo "> Setup Cask..."
    export PATH=$HOME/.cask/bin:$PATH
}

function setup_node() {
    echo "> Setup Node.js..."
    alias node="env NODE_NO_READLINE=1 rlwrap node"
    NPM_PACKAGES="$HOME/.local"
    PATH="$NPM_PACKAGES/bin:$PATH"
    export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"
    NODE_PATH="$NPM_PACKAGES/lib/node_modeuls:$NODE_PATH"
}

function fix_zip_korean() {
    echo "> Fix zip for Korean..."

    export UNZIP="-O CP949"
    export ZIPINFO=$UNZIP
}

function setup_path() {
    echo "> Setup Path..."
    export PATH=$HOME/bin:$HOME/.local/bin:$PATH
}

function setup_perl() {
    echo "> Setup Perl..."
    file=$HOME/perl5/perlbrew/etc/bashrc
    if [ -f $file ]
    then
	echo "$file"
	source $file
    fi
}

# https://blog.ansuchan.com/how-to-set-python-dev-env/
# https://github.com/yyuu/pyenv-installer
# curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
# Problems :
# http://www.reitermayer.org/python343/
# $ apt-get install libssl-dev
function setup_pyenv() {
    echo "> Setup Pyenv..."

    # https://github.com/yyuu/pyenv-virtualenv
    # $ git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
    export PYENV_ROOT="$HOME/.pyenv"

    if [ -d "${PYENV_ROOT}" ]; then
	export PATH="$PYENV_ROOT/bin:$PATH"
	# export PATH="$PYENV_ROOT/shims:$PATH"
	eval "$(pyenv init -)"

	# git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
	eval "$(pyenv virtualenv-init -)"

	# export PYENV_VIRTUALENV_INIT=1;
	# _pyenv_virtualenv_hook() {
	#     if [ -n "$PYENV_ACTIVATE" ]; then
	# 	if [ "$(pyenv version-name 2>/dev/null || true)" = "system" ]; then
	# 	    pyenv deactivate --no-error --verbose
	# 	    unset PYENV_DEACTIVATE
	# 	    return 0
	# 	fi
	# 	if [ "$PYENV_ACTIVATE" != "$(pyenv prefix 2>/dev/null || true)" ]; then
	# 	    if pyenv deactivate --no-error --verbose; then
	# 		unset PYENV_DEACTIVATE
	# 		pyenv activate --no-error --verbose || unset PYENV_DEACTIVATE
	# 	    else
	# 		pyenv activate --no-error --verbose
	# 	    fi
	# 	fi
	#     else
	# 	if [ -z "$VIRTUAL_ENV" ] && [ "$PYENV_DEACTIVATE" != "$(pyenv prefix 2>/dev/null || true)" ]; then
	# 	    pyenv activate --no-error --verbose
	# 	fi
	#     fi
	# };
    fi
}

function setup_python() {
    echo "> Setup Python..."
    setup_pyenv
    export PYTHONPATH="$PYTHONPATH"
}

function setup_ruby() {
    echo "> Setup Ruby..."
    # /home/simplucid/.gem/ruby/2.1.0/bin 
    export PATH=$HOME/.gem/ruby/2.2.0/bin:$PATH
}

function setup_linuxbrew() {
    export PATH="$HOME/.linuxbrew/bin:$PATH"
    export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
    export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
}

function setup_lein() {
}

setup_term
setup_gpg
# setup_key
setup_java
setup_maven
setup_android
setup_cask
setup_node

setup_perl
setup_python
setup_ruby
setup_go
setup_linuxbrew

setup_path
